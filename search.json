[{"path":"https://blueskypie.github.io/cHeatmap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 cHeatmap authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"convenience Heatmap","text":"cHeatmap wrapper excellent ComplexHeatmap::Heatmap() function additional functions friendly interface common tasks work, thus called convenience Heatmap. highly recommend reading ComplexHeatmap book advanced use. features: Automatic manual exclusion outliers color mapping color scale heatmap annotations dominated outliers. option set color-value mappings body annotations heatmaps. Automatic coloring dendrogram. Easy highlight display values certain cells body annotations heatmap. Discrete color-value mapping integer matrices containing unique values. Interface plot across rows. Handling edge cases: Inf -Inf values input matrix cause errors stats::dist() clustering, reset NA. missing values present input matrix row column annotations, legend missing value added. Plot heatmap data.frame columns different data types clustered one columns.","code":""},{"path":[]},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"exclusion-of-outliers-in-the-color-mapping","dir":"Articles","previous_headings":"Examples","what":"Exclusion of outliers in the color mapping","title":"convenience Heatmap","text":"Outliers numeric matrix dominate color scale make differences among many cells barely visible, heatmap body ra1 annotation .  Set rmLegendOutliers = T, default numerical vectors, remove outliers color-value mapping legends, difference body annotation can easily visualized. See Reference Manual details. Note affected labels legends now prefixed > <, unless mat1 discrete integer vector like ra1, .e. number unique items less intAsDiscreteCutoff.","code":"library(cHeatmap)  set.seed(100) nMat1 <- rnorm(27) mat1 <- matrix(c(-5,-Inf,nMat1,Inf), nrow = 6) rownames(mat1)=paste0('r',1:nrow(mat1)) colnames(mat1)=paste0('c',1:ncol(mat1)) raDf=data.frame(ra1=c(20,Inf,1:4),ra2=c(NA,letters[1:5])) rownames(raDf)=rownames(mat1) caDf=data.frame(ca1=c(9.8,11.3,6.9,5.4,-80)) rownames(caDf)=colnames(mat1)  cHeatmap(   mat1,   NA.color = 'grey50',   name = \"value\", # title of the legend for heatmap body   rmLegendOutliers = F, # keep outliers in the legends   cluster_rows = F, cluster_columns = F, # no clustering   cellFun = function(x) { x }, # display all the values in the body of the heatmap   rowAnnoDf = raDf, # add row annotation   colmAnnoDf = caDf, # add row annotation   annoCellFunList = list(ra1=\\(x) {1:nrow(raDf)}) # display all values of ra1 annotation ) cHeatmap(   mat1,   name = \"value\",    rmLegendOutliers = T, # remove outliers in the legends   cluster_rows = F, cluster_columns = F,    cellFun = function(x) { x },    rowAnnoDf = raDf,    colmAnnoDf = caDf,   annoCellFunList = list(ra1=\\(x) {1:nrow(raDf)},                          ca1=\\(x) {1:nrow(caDf)})  )"},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"manually-set-the-color-value-mapping","dir":"Articles","previous_headings":"Examples","what":"Manually set the color-value mapping","title":"convenience Heatmap","text":"Instead auto-detecting outliers, use colMap set range. Values outside range treated outliers.  Set multi-color mapping visualize local clusters outliers  Set distinct color different numerical ranges adding | names two colors, e.g. bCm caCm . adjust legend lengthen portion cluster 1 shorten portion 1 3 majority cluster 2 (3, 18) increase height whole legend 4cm","code":"cHeatmap(   mat1,   name = \"value\",    # manually set the color mapping for the heatmap body, here only the numeric      # values are set since the default colors are green, white, and red.     # one can also set only the upper or low bound, e.g. colMap = c(NA, 0, 1)   colMap = c(-1, 0, 1),    rmLegendOutliers = T, # remove outliers in the legends   cluster_rows = F, cluster_columns = F,    colmAnnoDf = caDf,   # manually set the color mapping for the ra1   colmAnnoColMap = list(ca1=c('white'=0,'gold'=12)) ) # create an Inf value nMat1 <- rnorm(30) uMat1 <- runif(12, -5, 20) mat2 <- matrix(c(nMat1, uMat1), nrow = 6) rownames(mat2)=paste0('r',1:nrow(mat1)) caDf2=data.frame(ca2=c(9.8,11.3,6.9,5.4,-80, 7, 60)) rownames(caDf2)=colnames(mat2)  bCm=c(\"green4\" = -1, \"white\" = 0, \"red\" = 1, #cluster 1              \"yellow\" = 3, \"blue\" = 18) #cluster 2 caCm = c('purple'=-80,'white'=0,'yellow4'=12, 'red'=60)  cHeatmap(mat2,   name = \"value\",   rmLegendOutliers = F,   colMap = bCm,   column_split = c(rep(\"nMat1\", 5), rep(\"uMat1\", 2)),   rowAnnoDf = raDf,    # manually set the color mapping for the ra1   rowAnnoColMap = list(ra1=c('white'=1,'gold'=4,'pink4'=20)),   colmAnnoDf = caDf2,   colmAnnoColMap = list(ca2=caCm)    ) bAt=c(-1,0,1,3,6,9,12,15,18) bCm=c(green = -1,            'green4|yellow' = 0,            'yellow4|red'=1,            'red4|deepskyblue' = 3,            blue4 = 18) caCm= c('purple'=-80,'purple2|white'=3,'yellow4|red'=12, 'red2'=60) caAt=c(-80,3,6,9,12,60) cHeatmap(mat2,          name = \"value\",          rmLegendOutliers = F,          #set color mapping with distinct regions          colMap = bCm,           column_split = c(rep(\"nMat1\", 5), rep(\"uMat1\", 2)),          legendTicks = bAt,          legendBreakDist = rep.int(1,length(bAt)-1),          legendHeight = 4,          rowAnnoDf = raDf,          rowAnnoColMap = list(ra1=c('white'=1,'gold'=4,'pink4'=20)),          colmAnnoDf = caDf2,          colmAnnoColMap = list(ca2=caCm),          colmAnnoPara = list(annotation_legend_param=list(            ca2=list(at=caAt,break_dist=rep.int(1,length(caAt)-1))            )) )"},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"display-cell-values-using-cellfun-and-annocellfun","dir":"Articles","previous_headings":"Examples","what":"Display cell values using cellFun and annoCellFun","title":"convenience Heatmap","text":"Show values (0.5, 1) heatmap body 5th value ra1 value b ra2.  Display outliers heatmap body ra1.  Mark outliers X;  Color outliers black edge.  Display H cell values > 2 L < 0.  Add black edge cell values > 2 display L < 0.","code":"cHeatmap(   mat1,   name = \"value\",    cellFun = \\(x) { if (is.finite(x) && x > 0.5 && x < 1) x  },    rowAnnoDf = raDf,    annoCellFunList = list(ra1=\\(x) {5},                          ra2=\\(x) {which(x=='b')})  ) cHeatmap(   mat1,   name = \"value\",    cellFun = 'o',    rowAnnoDf = raDf,    annoCellFunList = list(ra1=\\(x) 'o')  ) cHeatmap(   mat1,   name = \"value\",    cellFun = c(\"o\", \"X\"),    rowAnnoDf = raDf,    annoCellFunList = list(ra1=\\(x) list('o','X'))  ) cHeatmap(mat1,    cellFun = c(     \"o\", list(\"rect\", col = \"black\", lwd = 2)   ) ) cHeatmap(mat1,   cellFun = function(x) {     if(is.finite(x)){       if(x > 2) \"H\" else if(x < 0) \"L\"     }   } ) cHeatmap(mat1,   cellFun = function(x) {     if(is.finite(x)){       if(x > 2) list(\"rect\", col = \"black\", lwd = 2) else if(x < 0) \"L\"     }   } )"},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"color-dendrograms-and-split-the-clusters","dir":"Articles","previous_headings":"Examples","what":"Color dendrograms and split the clusters","title":"convenience Heatmap","text":"nRowCluster nColmCluster specify number colors corresponding dendrograms.","code":"cHeatmap(mat1,   name = \"value\",   rmLegendOutliers = F,   nRowCluster = 2, nColmCluster = 3,   row_split = 2, column_split = 3 )"},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"integer-matrices","dir":"Articles","previous_headings":"Examples","what":"Integer matrices","title":"convenience Heatmap","text":"number unique values greater intAsDiscreteCutoff whose default value 6 cHeatmap parameter settings, color mapping continuous; otherwise, mapping discrete.  Set colors manually.","code":"mati <- matrix(sample(1:100, 42, TRUE), nrow = 6) cHeatmap(mati, name = \"value\") mati <- matrix(sample(1:5, 42, TRUE), nrow = 6) cHeatmap(mati, name = \"value\") cHeatmap(mati,   name = \"value\",   colMap = c(\"red\" = 1, \"pink\" = 2, \"yellow\" = 3, \"green\" = 4, \"green4\" = 5) )"},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"concatenate-two-heatmaps","dir":"Articles","previous_headings":"Examples","what":"Concatenate two heatmaps","title":"convenience Heatmap","text":"Set drawHeatmap = F concatenate multiple heatmaps.","code":"nMat1 <- matrix(rnorm(30), nrow = 6) uMat1 <- matrix(runif(12, -5, 20), nrow = 6)  hm1 <- cHeatmap(nMat1, drawHeatmap = F, name = \"nMat1\") hm2 <- cHeatmap(uMat1, drawHeatmap = F, name = \"uMat1\") hm1 + hm2"},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"plot-inside-each-row-using-rowdraw","dir":"Articles","previous_headings":"Examples","what":"Plot inside each row using rowDraw","title":"convenience Heatmap","text":"painScore patient 2 plotted across visits. values transformed range (0,1), representing relative values across visits.  Plot lines points multiple rows.","code":"mat1 <- matrix(c(nMat1, uMat1), nrow = 6) rownames(mat1) <- paste(\"pt\", 1:6) colnames(mat1) <- paste(\"visit\", 1:7)  painScore <- rnorm(7)  cHeatmap(mat1,   name = \"value\", cluster_columns = F,   rowDraw = list(     list(\"grid.lines\", col = \"black\", lwd = 2),     matrix(painScore, nrow = 1), # data to be plotted     2 # plot at the 2nd row of mat1   ) ) # longitudinal scores of four patients painScore <- matrix(rnorm(28), nrow = 4) cHeatmap(mat1,   name = \"value\", cluster_columns = F,   rowDraw = list(     list(       list(\"grid.points\", size = 0.5, pch = 15, col = \"blue\"),       list(\"grid.lines\", col = \"black\", lwd = 2)     ),     painScore,      c(2, 3, 4, 5) # row indices of the four patients in mat1   ) )"},{"path":"https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html","id":"plot-a-heatmap-of-each-column-of-a-data-frame-of-different-data-types","dir":"Articles","previous_headings":"Examples","what":"Plot a heatmap of each column of a data.frame of different data types","title":"convenience Heatmap","text":"","code":"df2=cbind(m1=mat1[,1],raDf) cHeatmap(   df2[1],   name = \"m1\",    rowAnnoDf = df2[2:3] )"},{"path":"https://blueskypie.github.io/cHeatmap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jike Cui. Author, maintainer.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cui J (2025). cHeatmap: Plot Heatmaps. R package version 0.4.2, https://blueskypie.github.io/cHeatmap/, https://github.com/blueskypie/cHeatmap.","code":"@Manual{,   title = {cHeatmap: Plot Heatmaps},   author = {Jike Cui},   year = {2025},   note = {R package version 0.4.2,     https://blueskypie.github.io/cHeatmap/},   url = {https://github.com/blueskypie/cHeatmap}, }"},{"path":"https://blueskypie.github.io/cHeatmap/index.html","id":"cheatmap","dir":"","previous_headings":"","what":"Plot Heatmaps","title":"Plot Heatmaps","text":"cHeatmap wrapper excellent ComplexHeatmap::Heatmap() function additional functions friendly interface common tasks work, thus called convenience Heatmap. highly recommend reading ComplexHeatmap book advanced use. See manual examples Since just toy, plan submit CRAN. please install github directly: devtools::install_github(\"blueskypie/cHeatmap\")","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/addSingleValue.html","id":null,"dir":"Reference","previous_headings":"","what":"add a distinct color for a specific value in the legend color map — addSingleValue","title":"add a distinct color for a specific value in the legend color map — addSingleValue","text":"add distinct color specific value legend color map","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/addSingleValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add a distinct color for a specific value in the legend color map — addSingleValue","text":"","code":"addSingleValue(ColMap, s1 = 0.05, s2 = 0.001)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/addSingleValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add a distinct color for a specific value in the legend color map — addSingleValue","text":"ColMap named numeric vector,e.g. c('yellow'=0,'red'=8.99,'green4*'=9) s1, s2 portion whole legend; used control width color band specific value; example c('yellow'=0,'red'=8.95,'green4*'=9), width 8.95*(1+s2) 9 c('yellow*'=0,'red'=0.05,'green4'=9), width 0 0.05*(1-s2) c('yellow'=0,'red*'=1,'green4'=9), width 1*(1-s1) 1*(1+s1)","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/addSingleValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add a distinct color for a specific value in the legend color map — addSingleValue","text":"list two numeric vectors colmap: adjusted color maps breaks: breaks colmap","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/addSingleValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add a distinct color for a specific value in the legend color map — addSingleValue","text":"","code":"# examples at https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html"},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmaps — cHeatmap","title":"Plot heatmaps — cHeatmap","text":"wrapper ComplexHeatmap::Heatmap() additional functions friendly interfaces common tasks plotting heatmaps.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmaps — cHeatmap","text":"","code":"cHeatmap(   mat1,   NA.color = \"grey\",   whiteValue = NA,   colMap = c(green4 = NA, white = whiteValue, red = NA),   intAsDiscreteCutoff = 6,   legendPos = c(\"right\", \"left\", \"bottom\", \"top\"),   nRowCluster = NULL,   nColmCluster = NULL,   rowAnnoDf = NULL,   colmAnnoDf = NULL,   rowAnnoPara = list(na_col = NA.color),   colmAnnoPara = list(na_col = NA.color),   rowAnnoColMap = NULL,   colmAnnoColMap = NULL,   drawHeatmap = T,   rmLegendOutliers = is.numeric(mat1),   cellFun = NULL,   annoCellFunList = NULL,   cfMat = mat1,   cellFontSize = 9,   cellFontColor = \"black\",   rowDraw = NULL,   legendBreakDist = NULL,   legendHeight = NULL,   legendTicks = NULL,   legendTickLabels = NULL,   asGGplot = FALSE,   ... )"},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmaps — cHeatmap","text":"mat1 numeric character matrix data frame, required. NA.color character,'grey'; color missing values mat1, rowAnnoDf, colmAnnoDf. missing values present, square NA.color added legend. whiteValue Numeric, NULL; value white middle color legend mat1 numeric colMap consists three colors. colMap vector, c(\"green4\"=NA, \"white\"=whiteValue, \"red\"=NA); defines colors used heatmap mapping values, therefore supplied named vector. character mat1, colMap character vector, .e. c('red'='','pink'='b','yellow'='c') unique values mat1 , b, c. numeric mat1, colMap numeric vector, .e. c('blue'= NA,'green'=5, 'red'=10) colMap can supplied w/o names convenience, .e. c(-1, 0, 3); case, length must three names assumed c(\"green4\", \"white\", \"red\") first last value colMap lower upper bounds displayed values; values outside range considered outliers. One first last values colMap can supplied NA; outliers auto-computed rmLegendOutliers TRUE. intAsDiscreteCutoff integer, 6; mat1 integer matrix < 6 unique values, color mapping legend discrete. legendPos one c(\"right\", \"left\", \"bottom\", \"top\") nRowCluster, nColmCluster integer, NULL; number colored clusters row column; different clusters different colors. argument set, assumes cluster_rows cluster_columns TRUE; explicitly set two arguments . also split, .e. columns, set column_split = nColmCluster. rowAnnoDf, colmAnnoDf matrix data frame, NULL; annotation row column. rows rowAnnoDf/colmAnnoDf length order row/column mat1. rowAnnoPara, colmAnnoPara list, list(na_col = NA.color); passed ComplexHeatmap::rowAnnotation() ComplexHeatmap::columnAnnotation() rowAnnoColMap, colmAnnoColMap list, NULL; color mappings row column annotations handled automatically. Use parameter manually set color mappings, names(list) names annotation. item list vector named colors, similar parameter colMap. annotation numeric, vector numeric, .e. c(\"green4\"= -1, \"yellow\"=0, \"red\"=5) annotation numeric, vector character, .e. c('red'='','pink'='b','yellow'='c') drawHeatmap logical, TRUE; uses ComplexHeatmap::draw() merge legends one column draw final heatmap. set TRUE obtain clustering orders, .e. column_order() However, FALSE returned heatmap cHeatmap() concatenated heatmaps. rmLegendOutliers logical, .numeric(mat1); TRUE, non-outliers used color-value mappings; passed setColMapAndLegend() cellFun NULL; used display info individual cells; text info can formatted cellFontSize cellFontColor. different usages: function determine display certain cells; takes cell value input returned value displayed. example: cellFun = function(x){x}: display value cell cellFun = function(x){(x > 10) x}: display value cells whose values greater 10 cellFun = function(x){(x > 10) '?'}: display '?' sign cellFun = function(x){(x > 10) list('rect',col='black',lwd=2)}: color edges black set line width 2. Check parameters grid::gpar() controls. character vector list: cellFun = 'o': display values outliers mat1 cellFun = c('o','+'): display '+' sign instead value outlier cells cellFun=c('o',list('rect',col='red',lwd=2)): color outlier cells red edges 'o' 'rect' hard coded cases usage convenience; complicated cell drawing, use parameter cell_fun ComplexHeatmap::Heatmap() directly. annoCellFunList list functions define indices content display values annotation, NULL; use , drawHeatmap must TRUE; returned value function can followings: vector, actual values annotation displayed vector 'o', cells display outliers otherwise, vector indices original rowAnnoDf colmAnnoDf list two vectors 1st vector defined 2nd vector single string content display example, columns height name used annotation: annoCellFunList = list(height=\\(x){ (x>6)},name=\\(x) {1:2})): display heights greater 6 first two names annoCellFunList = list(height=\\(x){'o'},name=\\(x) {list(1:2,'x')})): display outlier heights first two names 'x' cfMat mat1; matrix cells cellFun; dimension mat1. gives option using different matrix evaluation cellFun display results top heatmap mat1. cellFontSize, cellFontColor numeric, 9; character, \"white\"; format text displayed heatmap cells. rowDraw list, NULL; used plot across rows. list contain following item: function grid package make draw parameters; examples: list('grid.points',size = grid::unit(0.3, \"char\"),gp=grid::gpar(col='black')) ; see grid::grid.points() details. grid.point, can also simply coded list('grid.points',size = 0.3,pch=1,col='black'); parameter col followed items gpar(). list('grid.lines',gp=grid::gpar(col='black',lwd = 2)); see grid::grid.lines() details. grid.lines, can also simply coded list('grid.lines',col='black',lwd = 2) parameter col followed items gpar(). list( list('grid.points',size = 0.3,col='black'), list('grid.lines',col='black',lwd = 2) ) multiple drawings matrix containing data make drawing, number columns integer vector specifying rows make drawing; NULL, means rows mat1 assumes nrow() == nrow(mat1) supplied matrix #2 See parameter layer_fun ComplexHeatmap::Heatmap() complex drawing across block cells. legendBreakDist numeric vector, NULL; set distance portion two breaks legend can following values: NULL; numeric distance among breaks 1; equal distance among breaks numeric vector represent relative length section two breaks; length length(legendTicks) - 1; legendHeight numeric, NULL; height vertical legend cm. legendTicks numeric, NULL; legend tick; default unname(colMap) can numeric vector whose range within unname(colMap). legendTickLabels character, NULL; label legend tick; length legendTicks; use ” skip tick. asGGplot logical, FALSE; output ggplot object, drawHeatmap must TRUE ... passed ComplexHeatmap::Heatmap()","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmaps — cHeatmap","text":"ggplot object asGGplot = TRUE, ComplexHeatmap::HeatmapList object drawHeatmap = TRUE, ComplexHeatmap::Heatmap object otherwise.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot heatmaps — cHeatmap","text":"features: Automatic manual exclusion outliers color mapping color scale heatmap annotations dominated outliers. option set color-value mappings body annotations heatmaps. Automatic coloring dendrogram. Easy highlight display values certain cells body annotations heatmap. Discrete color-value mapping integer matrices containing unique values. Clustering character matrix based orders characters. Interface plot across rows. Handling edge cases: Inf -Inf values input matrix cause errors stats::dist() clustering, reset NA. missing values present input matrix row column annotations, legend missing value added. Plot heatmap data.frame columns different data types clustered one columns.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot heatmaps — cHeatmap","text":"","code":"# examples at https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html"},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap0.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmaps — cHeatmap0","title":"Plot heatmaps — cHeatmap0","text":"wrapper ComplexHeatmap::Heatmap() additional functions friendly interfaces common tasks plotting heatmaps.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmaps — cHeatmap0","text":"","code":"cHeatmap0(   mat1,   NA.color = \"grey\",   whiteValue = NA,   colMap = c(green4 = NA, white = whiteValue, red = NA),   intAsDiscreteCutoff = 6,   legendPos = c(\"right\", \"left\", \"bottom\", \"top\"),   nRowCluster = NULL,   nColmCluster = NULL,   rowAnnoDf = NULL,   colmAnnoDf = NULL,   rowAnnoPara = list(na_col = NA.color),   colmAnnoPara = list(na_col = NA.color),   rowAnnoColMap = NULL,   colmAnnoColMap = NULL,   drawHeatmap = T,   rmLegendOutliers = is.numeric(mat1),   cellFun = NULL,   annoCellFunList = NULL,   cfMat = mat1,   cellFontSize = 9,   cellFontColor = \"black\",   rowDraw = NULL,   legendBreakDist = NULL,   legendHeight = NULL,   legendTicks = NULL,   legendTickLabels = NULL,   ... )"},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmaps — cHeatmap0","text":"mat1 numeric character matrix data frame, required. NA.color character,'grey'; color missing values mat1, rowAnnoDf, colmAnnoDf. missing values present, square NA.color added legend. whiteValue Numeric, NULL; value white middle color legend mat1 numeric colMap consists three colors. colMap vector, c(\"green4\"=NA, \"white\"=whiteValue, \"red\"=NA); defines colors used heatmap mapping values, therefore supplied named vector. character mat1, colMap character vector, .e. c('red'='','pink'='b','yellow'='c') unique values mat1 , b, c. numeric mat1, colMap numeric vector, .e. c('blue'= NA,'green'=5, 'red'=10) colMap can supplied w/o names convenience, .e. c(-1, 0, 3); case, length must three names assumed c(\"green4\", \"white\", \"red\") first last value colMap lower upper bounds displayed values; values outside range considered outliers. One first last values colMap can supplied NA; outliers auto-computed rmLegendOutliers TRUE. intAsDiscreteCutoff integer, 6; mat1 integer matrix < 6 unique values, color mapping legend discrete. legendPos one c(\"right\", \"left\", \"bottom\", \"top\") nRowCluster, nColmCluster integer, NULL; number colored clusters row column; different clusters different colors. argument set, assumes cluster_rows cluster_columns TRUE; explicitly set two arguments . also split, .e. columns, set column_split = nColmCluster. rowAnnoDf, colmAnnoDf matrix data frame, NULL; annotation row column. rows rowAnnoDf/colmAnnoDf length order row/column mat1. rowAnnoPara, colmAnnoPara list, list(na_col = NA.color); passed ComplexHeatmap::rowAnnotation() ComplexHeatmap::columnAnnotation() rowAnnoColMap, colmAnnoColMap list, NULL; color mappings row column annotations handled automatically. Use parameter manually set color mappings, names(list) names annotation. item list vector named colors, similar parameter colMap. annotation numeric, vector numeric, .e. c(\"green4\"= -1, \"yellow\"=0, \"red\"=5) annotation numeric, vector character, .e. c('red'='','pink'='b','yellow'='c') drawHeatmap logical, TRUE; uses ComplexHeatmap::draw() merge legends one column draw final heatmap. set TRUE obtain clustering orders, .e. column_order() However, FALSE returned heatmap cHeatmap() concatenated heatmaps. rmLegendOutliers logical, .numeric(mat1); TRUE, non-outliers used color-value mappings; passed setColMapAndLegend() cellFun NULL; used display info individual cells; text info can formatted cellFontSize cellFontColor. different usages: function determine display certain cells; takes cell value input returned value displayed. example: cellFun = function(x){x}: display value cell cellFun = function(x){(x > 10) x}: display value cells whose values greater 10 cellFun = function(x){(x > 10) '?'}: display '?' sign cellFun = function(x){(x > 10) list('rect',col='black',lwd=2)}: color edges black set line width 2. Check parameters grid::gpar() controls. character vector list: cellFun = 'o': display values outliers mat1 cellFun = c('o','+'): display '+' sign instead value outlier cells cellFun=c('o',list('rect',col='red',lwd=2)): color outlier cells red edges 'o' 'rect' hard coded cases usage convenience; complicated cell drawing, use parameter cell_fun ComplexHeatmap::Heatmap() directly. annoCellFunList list functions define indices content display values annotation, NULL; use , drawHeatmap must TRUE; returned value function can followings: vector, actual values annotation displayed vector 'o', cells display outliers otherwise, vector indices original rowAnnoDf colmAnnoDf list two vectors 1st vector defined 2nd vector single string content display example, columns height name used annotation: annoCellFunList = list(height=\\(x){ (x>6)},name=\\(x) {1:2})): display heights greater 6 first two names annoCellFunList = list(height=\\(x){'o'},name=\\(x) {list(1:2,'x')})): display outlier heights first two names 'x' cfMat mat1; matrix cells cellFun; dimension mat1. gives option using different matrix evaluation cellFun display results top heatmap mat1. cellFontSize, cellFontColor numeric, 9; character, \"white\"; format text displayed heatmap cells. rowDraw list, NULL; used plot across rows. list contain following item: function grid package make draw parameters; examples: list('grid.points',size = grid::unit(0.3, \"char\"),gp=grid::gpar(col='black')) ; see grid::grid.points() details. grid.point, can also simply coded list('grid.points',size = 0.3,pch=1,col='black'); parameter col followed items gpar(). list('grid.lines',gp=grid::gpar(col='black',lwd = 2)); see grid::grid.lines() details. grid.lines, can also simply coded list('grid.lines',col='black',lwd = 2) parameter col followed items gpar(). list( list('grid.points',size = 0.3,col='black'), list('grid.lines',col='black',lwd = 2) ) multiple drawings matrix containing data make drawing, number columns integer vector specifying rows make drawing; NULL, means rows mat1 assumes nrow() == nrow(mat1) supplied matrix #2 See parameter layer_fun ComplexHeatmap::Heatmap() complex drawing across block cells. legendBreakDist numeric vector, NULL; set distance portion two breaks legend can following values: NULL; numeric distance among breaks 1; equal distance among breaks numeric vector represent relative length section two breaks; length length(legendTicks) - 1; legendHeight numeric, NULL; height vertical legend cm. legendTicks numeric, NULL; legend tick; default unname(colMap) can numeric vector whose range within unname(colMap). legendTickLabels character, NULL; label legend tick; length legendTicks; use ” skip tick. ... passed ComplexHeatmap::Heatmap()","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmaps — cHeatmap0","text":"ComplexHeatmap::HeatmapList object drawHeatmap, ComplexHeatmap::Heatmap object otherwise.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot heatmaps — cHeatmap0","text":"features: Automatic manual exclusion outliers color mapping color scale heatmap annotations dominated outliers. option set color-value mappings body annotations heatmaps. Automatic coloring dendrogram. Easy highlight display values certain cells body annotations heatmap. Discrete color-value mapping integer matrices containing unique values. Clustering character matrix based orders characters. Interface plot across rows. Handling edge cases: Inf -Inf values input matrix cause errors stats::dist() clustering, reset NA. missing values present input matrix row column annotations, legend missing value added. Plot heatmap data.frame columns different data types clustered one columns.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cHeatmap0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot heatmaps — cHeatmap0","text":"","code":"# examples at https://blueskypie.github.io/cHeatmap/articles/cHeatmap-intro.html"},{"path":"https://blueskypie.github.io/cHeatmap/reference/cleanList.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove items of zero length from a list — cleanList","title":"Remove items of zero length from a list — cleanList","text":"Remove items zero length list","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cleanList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove items of zero length from a list — cleanList","text":"","code":"cleanList(x)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/cleanList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove items of zero length from a list — cleanList","text":"x list;","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cleanList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove items of zero length from a list — cleanList","text":"list","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/cleanList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove items of zero length from a list — cleanList","text":"","code":"#none"},{"path":"https://blueskypie.github.io/cHeatmap/reference/colMapDistinctRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"generate color mapping with regions of sharp separation — colMapDistinctRegions","title":"generate color mapping with regions of sharp separation — colMapDistinctRegions","text":"example, converts input c('green'=0,'green4|red'=2,'red4'=4) c('green'=0,'green4'=2,'red'=2+10e-6,'red4'=4)","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/colMapDistinctRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate color mapping with regions of sharp separation — colMapDistinctRegions","text":"","code":"colMapDistinctRegions(colMap)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/colMapDistinctRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate color mapping with regions of sharp separation — colMapDistinctRegions","text":"colMap named numerical vector; colors point separation separated '|'.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/colMapDistinctRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate color mapping with regions of sharp separation — colMapDistinctRegions","text":"normal color mapping vector;","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/colMapDistinctRegions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate color mapping with regions of sharp separation — colMapDistinctRegions","text":"","code":"colMapDistinctRegions(c('green'=0,'green4|red'=2,'red4'=4)) #>   green  green4     red    red4  #> 0.00000 2.00000 2.00001 4.00000"},{"path":"https://blueskypie.github.io/cHeatmap/reference/formatNum.html","id":null,"dir":"Reference","previous_headings":"","what":"format a numeric vector based on its distribution — formatNum","title":"format a numeric vector based on its distribution — formatNum","text":"format numeric vector based distribution","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/formatNum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"format a numeric vector based on its distribution — formatNum","text":"","code":"formatNum(v, less1 = F, rmLeading0 = F)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/formatNum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"format a numeric vector based on its distribution — formatNum","text":"v numeric vector less1 logical, FALSE; number digits formatting one less normal number digits; rmLeading0 logical, TRUE; removing leading 0 dicimals.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/formatNum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"format a numeric vector based on its distribution — formatNum","text":"character vector","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/formatNum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"format a numeric vector based on its distribution — formatNum","text":"","code":"formatNum(1234.5) #> [1] \"1,234\""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getDistinctColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get distinct colors — getDistinctColors","title":"Get distinct colors — getDistinctColors","text":"Get distinct colors","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getDistinctColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get distinct colors — getDistinctColors","text":"","code":"getDistinctColors(n)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/getDistinctColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get distinct colors — getDistinctColors","text":"n number distinct colors","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getDistinctColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get distinct colors — getDistinctColors","text":"character vector distinct colors","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getDistinctColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get distinct colors — getDistinctColors","text":"","code":"getDistinctColors(5) #> [1] \"dodgerblue2\" \"#E31A1C\"     \"green4\"      \"#6A3D9A\"     \"#FF7F00\""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getOutliersInd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the indices of outliers in a numeric vector or matrix — getOutliersInd","title":"Get the indices of outliers in a numeric vector or matrix — getOutliersInd","text":"Outliers < Q1-1.5IQR > Q3+1.5IQR","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getOutliersInd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the indices of outliers in a numeric vector or matrix — getOutliersInd","text":"","code":"getOutliersInd(x)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/getOutliersInd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the indices of outliers in a numeric vector or matrix — getOutliersInd","text":"x numeric vector matrix","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getOutliersInd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the indices of outliers in a numeric vector or matrix — getOutliersInd","text":"list two int vectors indices outliers low end indices outliers high end","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/getOutliersInd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the indices of outliers in a numeric vector or matrix — getOutliersInd","text":"","code":"getOutliersInd(c(1,100:110,1000)) #> $low #> [1] 1 #>  #> $high #> [1] 13 #>"},{"path":"https://blueskypie.github.io/cHeatmap/reference/gridFuns.html","id":null,"dir":"Reference","previous_headings":"","what":"a wrapper for grid::grid.points() and grid::grid.lines() — gridFuns","title":"a wrapper for grid::grid.points() and grid::grid.lines() — gridFuns","text":"process user-supplied functions. See doc parameter rowDraw cHeatmap function details","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/gridFuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a wrapper for grid::grid.points() and grid::grid.lines() — gridFuns","text":"","code":"gridFuns(x, y, fun1)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/gridFuns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a wrapper for grid::grid.points() and grid::grid.lines() — gridFuns","text":"x, y x y used fun1 fun1 list containg info grid function e.g. list('grid.points',size = 0.3,pch=1,col='black')","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/gridFuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"a wrapper for grid::grid.points() and grid::grid.lines() — gridFuns","text":"","code":"# none"},{"path":"https://blueskypie.github.io/cHeatmap/reference/hasInfinite.html","id":null,"dir":"Reference","previous_headings":"","what":"determine if a vector, matrix, or data.frame contains NA, NaN, Inf, -Inf — hasInfinite","title":"determine if a vector, matrix, or data.frame contains NA, NaN, Inf, -Inf — hasInfinite","text":"determine vector, matrix, data.frame contains NA, NaN, Inf, -Inf","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/hasInfinite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"determine if a vector, matrix, or data.frame contains NA, NaN, Inf, -Inf — hasInfinite","text":"","code":"hasInfinite(x)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/hasInfinite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"determine if a vector, matrix, or data.frame contains NA, NaN, Inf, -Inf — hasInfinite","text":"x vector, matrix, data.frame","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/hasInfinite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"determine if a vector, matrix, or data.frame contains NA, NaN, Inf, -Inf — hasInfinite","text":"logical value","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/hasInfinite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"determine if a vector, matrix, or data.frame contains NA, NaN, Inf, -Inf — hasInfinite","text":"","code":"k=c(1:3,Inf) hasInfinite(k) #> [1] TRUE k=factor(k) !is.finite(k) #> [1] FALSE FALSE FALSE FALSE hasInfinite(k) #> [1] TRUE"},{"path":"https://blueskypie.github.io/cHeatmap/reference/setAnnoLegend.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the color mapping, tick, and tick labels of annotation legends. — setAnnoLegend","title":"Set the color mapping, tick, and tick labels of annotation legends. — setAnnoLegend","text":"Specifically, following: non-numerical variables annoDf,create color mapping using colors getDistinctColors() default colors distinct. numerical variables, apply setColMapAndLegend()","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/setAnnoLegend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the color mapping, tick, and tick labels of annotation legends. — setAnnoLegend","text":"","code":"setAnnoLegend(   mat1,   annoDf,   annoColMapList = NULL,   annoParaList = list(),   on = 1:2,   rmLegendOutliers = T,   intAsDiscreteCutoff = 6 )"},{"path":"https://blueskypie.github.io/cHeatmap/reference/setAnnoLegend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the color mapping, tick, and tick labels of annotation legends. — setAnnoLegend","text":"annoDf data.frame; annotation annoColMapList list color mappings annotation, NULL; value passed col ComplexHeatmap::HeatmapAnnotation(). names(annoColMapList) among colnames(annoDf) annoParaList list annotation parameters except col ComplexHeatmap::HeatmapAnnotation(), list(); 1:2; row column annotation rmLegendOutliers logical, TRUE; passed setColMapAndLegend() intAsDiscreteCutoff integer, 6; passed setColMapAndLegend()","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/setAnnoLegend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the color mapping, tick, and tick labels of annotation legends. — setAnnoLegend","text":"list() following items: ha: object ComplexHeatmap::HeatmapAnnotation() col legend tick labels reset based rmLegendOutliers newDf: infinite values numerical columns annoDf, present, set NA","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/setAnnoLegend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the color mapping, tick, and tick labels of annotation legends. — setAnnoLegend","text":"","code":"# none"},{"path":"https://blueskypie.github.io/cHeatmap/reference/setColMapAndLegend.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the color mapping of a numerical vector, and the tick and tick labels of its legend — setColMapAndLegend","title":"Set the color mapping of a numerical vector, and the tick and tick labels of its legend — setColMapAndLegend","text":"purpose function auto-handle outliers numerical vectors, outliers compress color mapping make difficult distinguish among values non-outliers.ways achieve goal function outliers present: non-outliers used color-value mapping. '<' '>' sign prefixed first last tick labels.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/setColMapAndLegend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the color mapping of a numerical vector, and the tick and tick labels of its legend — setColMapAndLegend","text":"","code":"setColMapAndLegend(   vec,   colMap = NULL,   whiteValue = NA,   intAsDiscreteCutoff = 6,   rmLegendOutliers = T,   isAnnotation = F,   legendTicks = NULL,   legendTickLabels = NULL )"},{"path":"https://blueskypie.github.io/cHeatmap/reference/setColMapAndLegend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the color mapping of a numerical vector, and the tick and tick labels of its legend — setColMapAndLegend","text":"vec numerical; vector matrix colMap named numerical vector color mapping,NULL; colMap provided, names colMap set followings: *  isAnnotation, c('white',x) x random color getDistinctColors. *  otherwise, c('green4', 'white', 'red'). whiteValue Numeric, NA; value white middle color legend colMap consists three colors representing, e.g. , change, , etc. intAsDiscreteCutoff integer, 6; mat1 integer matrix < 6 unique values, color mapping legend discrete. rmLegendOutliers logical, TRUE; colMap provided, FALSE, range legend ticks covers values vac TRUE, range legend ticks covers non-outliers isAnnotation logical, FALSE; TRUE, legend annotation heatmap, heatmap ; legendTicks numerical vector, NULL; legendTickLabels character vector, NULL;","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/setColMapAndLegend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the color mapping of a numerical vector, and the tick and tick labels of its legend — setColMapAndLegend","text":"list following items colmap: completed colMap legendParas: list(= legendTicks,labels = legendTickLabels). may also contains legend_gp vec discrete integers; passed ComplexHeatmap::HeatmapAnnotation(annotation_legend_param) newVals: infinite values vec, present, set NA isDiscrete: vec discrete?","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/setColMapAndLegend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the color mapping of a numerical vector, and the tick and tick labels of its legend — setColMapAndLegend","text":"","code":"# none"},{"path":"https://blueskypie.github.io/cHeatmap/reference/vecSwitch.html","id":null,"dir":"Reference","previous_headings":"","what":"given a named vector, switch its content and name — vecSwitch","title":"given a named vector, switch its content and name — vecSwitch","text":"given named vector, switch content name","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/vecSwitch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"given a named vector, switch its content and name — vecSwitch","text":"","code":"vecSwitch(vec1)"},{"path":"https://blueskypie.github.io/cHeatmap/reference/vecSwitch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"given a named vector, switch its content and name — vecSwitch","text":"vec1 named vector","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/vecSwitch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"given a named vector, switch its content and name — vecSwitch","text":"named vector whose names() equals vec1 content names(vec1)","code":""},{"path":"https://blueskypie.github.io/cHeatmap/reference/vecSwitch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"given a named vector, switch its content and name — vecSwitch","text":"","code":"vecSwitch(c('red'='a','pink'='b','yellow'='c')) #>        a        b        c  #>    \"red\"   \"pink\" \"yellow\""},{"path":"https://blueskypie.github.io/cHeatmap/news/index.html","id":"cheatmap-011","dir":"Changelog","previous_headings":"","what":"cHeatmap 0.1.1","title":"cHeatmap 0.1.1","text":"Added legendBreakDist legendHeight adjust legend.","code":""},{"path":"https://blueskypie.github.io/cHeatmap/news/index.html","id":"cheatmap-010","dir":"Changelog","previous_headings":"","what":"cHeatmap 0.1.0","title":"cHeatmap 0.1.0","text":"Implemented basic functions.","code":""}]
